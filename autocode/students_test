package coverage

import (
	"os"
	"reflect"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestPeople_Len(t *testing.T) {
	tests := []struct {
		name string
		p    People
		want int
	}{
		{
			name: "Two persons",
			p: People{
				Person{},
				Person{},
			},
			want: 2,
		},
		{
			name: "Two persons",
			p:    People{},
			want: 0,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.p.Len(); got != tt.want {
				t.Errorf("Len() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestPeople_Less(t *testing.T) {
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name string
		p    People
		args args
		want bool
	}{
		{
			name: "Compare birthday",
			p: People{
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
				Person{
					firstName: "John",
					birthDay:  time.Date(1994, 1, 8, 0, 0, 0, 0, time.Local),
				},
			},
			args: args{
				i: 0,
				j: 1,
			},
			want: false,
		},
		{
			name: "Compare birthday",
			p: People{
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
				Person{
					firstName: "John",
					birthDay:  time.Date(1994, 1, 8, 0, 0, 0, 0, time.Local),
				},
			},
			args: args{
				i: 1,
				j: 0,
			},
			want: true,
		},
		{
			name: "Compare birthday",
			p: People{
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
				Person{
					firstName: "John",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
			},
			args: args{
				i: 1,
				j: 0,
			},
			want: false,
		},
		{
			name: "Compare birthday",
			p: People{
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
			},
			args: args{
				i: 1,
				j: 0,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.p.Less(tt.args.i, tt.args.j); got != tt.want {
				t.Errorf("Less() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestPeople_Swap(t *testing.T) {
	type args struct {
		i int
		j int
	}
	tests := []struct {
		name string
		p    People
		args args
	}{
		{
			name: "Compare birthday",
			p: People{
				Person{
					firstName: "Alex",
					birthDay:  time.Date(1990, 4, 5, 0, 0, 0, 0, time.Local),
				},
				Person{
					firstName: "John",
					birthDay:  time.Date(1994, 1, 8, 0, 0, 0, 0, time.Local),
				},
			},
			args: args{
				i: 0,
				j: 1,
			},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			tt.p.Swap(tt.args.i, tt.args.j)
			if tt.p[0].firstName != "John" {
				t.Errorf("Swap() = %v, want %v", tt.p[0].firstName, "John")
			}
		})
	}
}

func TestNew(t *testing.T) {
	type args struct {
		str string
	}
	tests := []struct {
		name    string
		args    args
		want    *Matrix
		wantErr bool
	}{
		{
			name: "String with error",
			args: args{
				str: "Text with error",
			},
			want:    nil,
			wantErr: true,
		},
		{
			name: "String without error",
			args: args{
				str: "5 4 3",
			},
			want: &Matrix{
				rows: 1,
				cols: 3,
				data: []int{5, 4, 3},
			},
			wantErr: false,
		},
		{
			name: "String with error",
			args: args{
				str: "5 4 3\n2,1",
			},
			want:    nil,
			wantErr: true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := New(tt.args.str)
			if (err != nil) != tt.wantErr {
				t.Errorf("New() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("New() got = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMatrix_Rows(t *testing.T) {
	type fields struct {
		rows int
		cols int
		data []int
	}
	tests := []struct {
		name   string
		fields fields
		want   [][]int
	}{
		{
			name: "Matrix",
			fields: fields{
				rows: 2,
				cols: 3,
				data: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
			want: [][]int{{1, 2, 3}, {4, 5, 6}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := Matrix{
				rows: tt.fields.rows,
				cols: tt.fields.cols,
				data: tt.fields.data,
			}
			if got := m.Rows(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Rows() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMatrix_Cols(t *testing.T) {
	type fields struct {
		rows int
		cols int
		data []int
	}
	tests := []struct {
		name   string
		fields fields
		want   [][]int
	}{
		{
			name: "Matrix",
			fields: fields{
				rows: 2,
				cols: 3,
				data: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
			want: [][]int{{1, 4}, {2, 5}, {3, 6}},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := Matrix{
				rows: tt.fields.rows,
				cols: tt.fields.cols,
				data: tt.fields.data,
			}
			if got := m.Cols(); !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Cols() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestMatrix_Set(t *testing.T) {
	type fields struct {
		rows int
		cols int
		data []int
	}
	type args struct {
		row   int
		col   int
		value int
	}
	tests := []struct {
		name   string
		fields fields
		args   args
		want   bool
	}{
		{
			name: "Matrix",
			fields: fields{
				rows: 2,
				cols: 3,
				data: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
			args: args{
				col:   2,
				row:   1,
				value: 4,
			},
			want: true,
		},
		{
			name: "Matrix",
			fields: fields{
				rows: 2,
				cols: 3,
				data: []int{1, 2, 3, 4, 5, 6, 7, 8, 9},
			},
			args: args{
				col:   2,
				row:   -5,
				value: 4,
			},
			want: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			m := &Matrix{
				rows: tt.fields.rows,
				cols: tt.fields.cols,
				data: tt.fields.data,
			}
			if got := m.Set(tt.args.row, tt.args.col, tt.args.value); got != tt.want {
				t.Errorf("Set() = %v, want %v", got, tt.want)
			}
		})
	}
}
